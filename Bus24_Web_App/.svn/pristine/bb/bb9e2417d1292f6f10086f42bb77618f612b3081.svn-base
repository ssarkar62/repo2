package com.bus24.web.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bus24.beans.Response;
import com.bus24.beans.User;
import com.bus24.util.JsonUtil;
import com.bus24.util.Roles;
import com.bus24.util.StatusUtil;
import com.bus24.web.service.UserService;

@Controller
public class UserController {
	@Autowired
	private UserService userService;

	@RequestMapping(value = "register", method = RequestMethod.GET)
	public String showPassengerRegistrationPage() {
		return "passengerRegistration";
	}

	@ResponseBody
	@RequestMapping(value = "register", method = RequestMethod.POST)
	public String registerPassenger(@ModelAttribute User user) {
		String jsonResponse = userService.registerPassenger(user);
		return jsonResponse;
	}

	@ResponseBody
	@RequestMapping(value = "validateOtp", method = RequestMethod.POST)
	public String validateOtp(@RequestBody String jsonOtp) {
		String jsonResponse = userService.validateOtp(jsonOtp);
		return jsonResponse;
	}

	@ResponseBody
	@RequestMapping(value = "resendOtp", method = RequestMethod.POST)
	public String resendOtp(@RequestBody String jsonUser) {
		String jsonResponse = userService.resendOtp(jsonUser);
		return jsonResponse;
	}
	/**this method is used to get the login page
	 * @author Eshwar
	 * @version 1.0
	 */
	@RequestMapping(value = "login", method = RequestMethod.GET)
	public String showUserLoginPage() {
		return "loginUser";
	}
	
	@RequestMapping(value="loginUser",method=RequestMethod.POST)
	public ModelAndView 
	loginUser(@ModelAttribute User user,
			HttpServletRequest req){
	ModelAndView modelAndView=new ModelAndView();
	modelAndView.setViewName("loginUser");
	modelAndView.addObject("message","Login Failure!Please Try Again.");
 if(user!=null && user.getUserName()!=null && user.getPassword()!=null){
	
Response response=userService.loginUser(user);
//response contain status,message ,data
  //data is nothing but  userobj(userId,username,token,userRole) in json
  if(response.getStatus().equals(StatusUtil.STATUS_SUCCESS)){
	 String jsonUser=response.getData();
	 //convert jsonUser into User object
	user=JsonUtil.convertJsonToJava(jsonUser,User.class);
	//start session (OR) get existed session
	HttpSession session=req.getSession();
	session.setAttribute("userId",user.getUserId());
	session.setAttribute("userName",user.getUserId());
	session.setAttribute("userRole",user.getUserId());
	session.setAttribute("token",user.getUserId());
//if role is passenger then check user status is Active (OR) Mobile Not Verified
  if(user.getUserRole().equals(Roles.ROLE_PASSENGER)){	
	  if(user.getStatus().equals((byte)0)){
		//show OTP form
		 modelAndView.setViewName("otpForm");
 modelAndView.addObject("mobile",user.getMobile());
 modelAndView.addObject("userId",user.getUserId());
 modelAndView.addObject("message",response.getMessage());
 	  }else{
		//forward to passengerDashboard
	modelAndView.setViewName("passengerDashboard");	  
	  }
  }else{
	//for other roles not required to be check user status
modelAndView.setViewName("adminDashboard");			  
  }
	
	
	
  }else{
	modelAndView.setViewName("loginUser");
	modelAndView.addObject("message",response.getMessage());
	
  }
 }
      return modelAndView;
	}
}







